{"version":3,"file":"index.js","sources":["../src/Network/Response.js","../src/MFSettings.js","../src/MFWebView.js","../src/Models.js","../src/Network/TypeCheck.js","../src/Network/Request.js","../src/Network/LOGGER.js","../src/Network/RNETWORK.js","../src/Enums.js","../src/MFPaymentRequest/MFPaymentRequest.js","../src/MFPaymentRequest/MFPaymentRequest.HelperMethods.js"],"sourcesContent":["export default class Response {\n  constructor() {\n    this.body = '';\n    this.error = null;\n  }\n\n  setBody(body) {\n    this.body = body;\n  }\n\n  getBodyString() {\n    return this.body;\n  }\n\n  getBodyJson() {\n    return JSON.parse(this.body);\n  }\n\n  setError(errorMessage, error) {\n    this.error = {\n      message: errorMessage,\n      error: error\n    }\n  }\n\n  getError() {\n    return this.error;\n  }\n\n  toString() {\n    return JSON.stringify({\n      body: this.body,\n      error: this.error,\n    });\n  }\n\n  getPaymentMethods() {\n    return this.getBodyJson().Data.PaymentMethods\n  }\n  getInvoiceId() {\n    return this.getBodyJson().Data.InvoiceId\n  }\n  getPaymentURL() {\n    return this.getBodyJson().Data.PaymentURL\n  }\n  getData() {\n    return this.getBodyJson().Data\n  }\n\n  errorMessage(fromDirectPayment, fromExecute) {\n    if (this.error) {\n      return this.getError().error\n    }\n    if (this.getBodyJson().IsSuccess) {\n      if (!fromDirectPayment) {\n        if (this.getBodyJson().Data.IsDirectPayment) {\n          return 'For direct payment please call executeDirectPayment method'\n        }\n      }\n      if (fromExecute) {\n        if (this.getBodyJson().Data.PaymentURL === undefined) {\n          return 'There is no payment URL'\n        }\n      }\n      if(this.getBodyJson().Data.InvoiceTransactions !== undefined) {\n        var message = ''\n        this.getBodyJson().Data.InvoiceTransactions.forEach(element => {\n          if (element.TransactionStatus == \"Succss\") {\n            return ''\n          } else if (element.TransactionStatus == \"Failed\") {\n            message = element.Error\n          }\n        })\n        return message\n      }\n      return ''\n    }\n    var message = this.getBodyJson().Message + '\\n'\n    if (this.getBodyJson().ValidationErrors !== null) {\n      this.getBodyJson().ValidationErrors.forEach(element => {\n        message = message + element.Name + ': ' + element.Error + '\\n'\n      });\n    }\n    return message\n  }\n\n}\n","\nexport class MFSettings {\n    static sharedInstance = MFSettings.sharedInstance == null ? new MFSettings() : MFSettings.sharedInstance\n    configure(baseURL, token) {\n        if (baseURL.charAt(baseURL.length-1) !== \"/\") {\n            this.baseURL = baseURL + '/';\n        } else {\n            this.baseURL = baseURL;\n        }\n      this.token = token\n    }\n  \n    getBaseURL() {\n      return  this.baseURL + 'v2/';\n    }\n    getToken() {\n      return this.token\n    }\n    setTheme(theme) {\n      this.theme = theme\n    }\n    getTheme() {\n      if(this.theme === undefined) {\n        return new MFTheme('red', 'gray', 'Payment', 'Cancel')\n      }\n      return this.theme\n    }\n    \n  }\n\n  export function MFTheme(navigationTintColor, navigationBarTintColor, navigationTitle, cancelButtonTitle) {\n    this.navigationTintColor = navigationTintColor\n    this.navigationBarTintColor = navigationBarTintColor\n    this.navigationTitle = navigationTitle\n    this.cancelButtonTitle = cancelButtonTitle\n}","import React, { Component } from 'react';\nimport { WebView } from 'react-native-webview';\nimport { ActivityIndicator, StyleSheet, Button, TouchableOpacity, Image } from 'react-native';\nimport { MFPaymentRequest, MFPaymentStatusRequest } from './index.js';\nimport { CALLBACK_URL, ERROR_URL } from './index.js';\nimport { MFSettings, Response} from './index.js';\nimport { YellowBox } from 'react-native';\n\nYellowBox.ignoreWarnings([\n  'Non-serializable values were found in the navigation state',\n]);\n\nexport default class MFWebView extends Component {\n  \n  \n  constructor(props) {\n    super(props);\n  }\n  componentDidUpdate(prevProps) {\n    this.myWebView.reload()\n  }\n\n  //region HELPERS METHODS\n  LoadingIndicatorView() {\n    return <ActivityIndicator color={MFSettings.sharedInstance.getTheme().navigationTintColor} size='large' style={styles.ActivityIndicatorStyle} />\n  }\n  parseURLParams(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n      results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n  }\n  //endregion\n\n  //region CALLBACKS\n  onNavigationStateChange = (navigationState) => {\n    const url = navigationState.url;\n\n    const { route } = this.props\n    const { navigation } = this.props\n    const { apiLanguage } = route.params\n    const { postExecuteCallback } = route.params\n    const { cardInfoResponse } = route.params\n    // alert('onNavigationStateChange')\n    if (url.includes(CALLBACK_URL) || url.includes(ERROR_URL)) {\n      if (url.includes('paymentId')) {\n        let paymentId = this.parseURLParams('paymentId', url);\n        var paymentStatusRequest = new MFPaymentStatusRequest(paymentId, \"PaymentId\")\n        MFPaymentRequest.sharedInstance.getPaymentStatus(paymentStatusRequest, apiLanguage, (response: Response) => {\n          var errorMessage = response.errorMessage(false, false)\n          if (errorMessage.length !== 0) {\n            response.setError('Error Message', errorMessage)\n            postExecuteCallback(response);\n          } else {\n\n            if (cardInfoResponse !== undefined) {\n              var directPaymentResponse = new Response()\n              var directPaymentJson = {\n                getPaymentStatusResponse: response.getBodyJson().Data,\n                cardInfoResponse: cardInfoResponse\n              }\n              directPaymentResponse.setBody(JSON.stringify(directPaymentJson))\n              postExecuteCallback(directPaymentResponse)\n            } else {\n              postExecuteCallback(response)\n            }\n          }\n          navigation.goBack()\n        })\n      }\n    }\n  };\n  //endregion\n\n  //region navigationOptions\n  static navigationOptions = ({ navigation, route }) => {\n    return {\n      gestureEnabled: false,\n      title: MFSettings.sharedInstance.getTheme().navigationTitle,\n      headerStyle: {\n        backgroundColor: MFSettings.sharedInstance.getTheme().navigationBarTintColor,\n      },\n      headerTintColor: MFSettings.sharedInstance.getTheme().navigationTintColor,\n      headerRight: () => (\n        <TouchableOpacity onPress={()=> navigation.setParams({ refresh: 1 })}>\n          <Image style={[styles.ImageClass, {tintColor: MFSettings.sharedInstance.getTheme().navigationTintColor}]} source={require('./assets/refresh.png')} />\n        </TouchableOpacity>\n      ),\n      headerLeft: () => (\n        <Button\n          onPress={() => {\n            const { postExecuteCallback } = route.params\n            let response = new Response()\n            response.setError('Error Message', 'User clicked cancel button')\n            postExecuteCallback(response)\n            navigation.goBack()\n          }}\n          title={MFSettings.sharedInstance.getTheme().cancelButtonTitle}\n          color={MFSettings.sharedInstance.getTheme().navigationTintColor}\n        />\n      ),\n    };\n  };\n  //endregion\n  \n  \n  render() {\n    const { route } = this.props\n    const { link } = route.params\n\n    return (\n      <WebView\n        source={{ uri: link }}\n        renderLoading={this.LoadingIndicatorView}\n        startInLoadingState={true}\n        ref={(ref) => this.myWebView = ref}\n        onNavigationStateChange={this.onNavigationStateChange}\n      />\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  ActivityIndicatorStyle: {\n    flex: 1,\n    justifyContent: 'center',\n    top: 0, right: 0, left: 0, bottom: 0,\n    position: 'absolute',\n  },\n  ImageClass:\n  {\n    // Setting up image width.\n    width: 25,\n\n    // Setting up image height.\n    height: 25,\n    margin: 10\n  }\n})","import { CALLBACK_URL, ERROR_URL } from './index.js';\n\nexport function MFPaymentStatusRequest(key, keyType) {\n  this.key = key\n  this.keyType = keyType\n}\n\nexport function MFInitiatePayment(invoiceAmount, currencyIso) {\n  this.invoiceAmount = invoiceAmount\n  this.currencyIso = currencyIso\n}\nexport function MFExecutePaymentRequest(invoiceValue, paymentMethod, callBackUrl, errorUrl) {\n  this.invoiceValue = invoiceValue\n  this.paymentMethod = paymentMethod\n  if (callBackUrl === undefined) {\n    this.callBackUrl = CALLBACK_URL\n  } else {\n    this.callBackUrl = callBackUrl\n  }\n  if (errorUrl === undefined) {\n    this.errorUrl = ERROR_URL\n  } else {\n    this.errorUrl = errorUrl\n  }\n\n  this.customerName = ''\n  this.customerCivilId = ''\n  this.customerReference = ''\n  this.customerEmail = ''\n  this.customerMobile = ''\n  this.invoiceItems = []\n  this.language = 'en'\n  this.expiryDate = null\n  this.customerAddress = new MFCustomerAddress('', '', '', '', '')\n  this.userDefinedField = ''\n  this.displayCurrencyIso = 'KWD'\n  this.mobileCountryCode = '+965'\n  this.supplierCode = 0\n  this.supplierValue = 0\n}\n\nexport function MFProduct(name, unitPrice, quantity) {\n  this.name = name\n  this.unitPrice = unitPrice\n  this.quantity = quantity\n}\n\nexport function MFCustomerAddress(block, street, houseBuildingNo, address, addressInstructions) {\n  this.block = block\n  this.street = street\n  this.houseBuildingNo = houseBuildingNo\n  this.address = address\n  this.addressInstructions = addressInstructions\n}\n\nexport function MFCardInfo(\n  cardNumber: String,\n  cardExpiryMonth: String,\n  cardExpiryYear: String,\n  cardSecurityCode: String,\n  cardHolderName: String,\n  paymentType: String,\n  saveToken: Boolean) {\n  this.paymentType = paymentType\n  this.card = new MFCard(cardNumber, cardExpiryMonth, cardExpiryYear, cardSecurityCode, cardHolderName)\n  this.saveToken = saveToken\n  this.bypass = true\n}\n\nfunction MFCard(number, expiryMonth, expiryYear, securityCode, cardHolderName) {\n  this.number = number\n  this.expiryMonth = expiryMonth\n  this.expiryYear = expiryYear\n  this.securityCode = securityCode\n  this.cardHolderName = cardHolderName\n}\n\nexport function MFSendPaymentRequest(invoiceValue, notificationOption, customerName) {\n  this.invoiceValue = invoiceValue\n  this.customerName = customerName\n  this.notificationOption = notificationOption\n  this.mobileCountryIsoCode = '+965'\n  this.displayCurrencyIso = 'KWD'\n  this.customerCivilId = ''\n  this.customerReference = ''\n  this.customerEmail = ''\n  this.customerMobile = ''\n  this.invoiceItems = []\n  this.language = 'en'\n  this.expiryDate = null\n  this.errorUrl = ''\n  this.customerAddress = new MFCustomerAddress('', '', '', '', '')\n  this.callBackUrl = ''\n  this.userDefinedField = ''\n  this.supplierCode = 0\n  this.supplierValue = 0\n}","export default class TypeCheck{\n\n  static isObject(obj) {\n    return (Object.prototype.toString.call(obj) === '[object Object]');\n  }\n\n  static isArray(arr) {\n    return (Object.prototype.toString.call(arr) === '[object Array]');\n  }\n\n  static isString(str) {\n    return (Object.prototype.toString.call(str) === '[object String]');\n  }\n\n  static isEmpty(value) {\n    return (value === undefined || value === null || value.trim() === '');\n  }\n\n  static isEmptyObject(value) {\n    return (value === undefined || value === null);\n  }\n\n  static isValidUrl(url) {\n    let regx = /^(http[s]?:\\/\\/){0,1}(www\\.){0,1}[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z]{2,5}[\\.]{0,1}/;\n    return regx.test(url)\n  }\n\n}\n","import TypeCheck from './TypeCheck';\n\nexport default class Request{\n\n  static TYPES() {\n    return {\n      'string' : 1,\n      'json' : 2,\n      'form' : 3\n    };\n  }\n\n  constructor(url) {\n    this.setUrl(url);\n    this.headers = {};\n  }\n\n  setUrl(url) {\n    if (!TypeCheck.isString(url) || TypeCheck.isEmpty(url)) {\n      throw new Error(\"Invalid url string\");\n    }else if(!TypeCheck.isValidUrl(url)){\n      throw new Error(\"Invalid url string\");\n    }\n    this.url = url;\n  }\n\n  getUrl() {\n    return this.url;\n  }\n\n  addHeader(key, value) {\n    if (TypeCheck.isObject(key) || TypeCheck.isArray(key)) {\n      throw new Error(\"Invalid header key type\");\n    }\n    if (TypeCheck.isObject(value) || TypeCheck.isArray(value)) {\n      throw new Error(\"Invalid header value type\");\n    }\n    this.headers[key] = value;\n  }\n\n  addHeaders(headersObj) {\n    if (!TypeCheck.isObject(headersObj)) {\n      throw new Error(\"Invalid header object type\");\n    }\n    for (var property in headersObj) {\n      this.headers[property] = headersObj[property];\n    }\n  }\n\n  getHeaders() {\n    return this.headers;\n  }\n\n  setStringData(stringData) {\n    if (TypeCheck.isObject(stringData) || TypeCheck.isArray(stringData)) {\n      throw new Error(\"Invalid string data\");\n    }\n    this.stringData = stringData;\n    this.type = Request.TYPES().string;\n    this.data = stringData;\n  }\n\n  getStringData() {\n    return this.stringData;\n  }\n\n  setFormData(fromData) {\n    if (TypeCheck.isObject(fromData)) {\n      this.fromData = fromData;\n      this.type = Request.TYPES().form;\n      this.data = Request.generateFormBody(this.formData);\n    }else{\n      throw new Error(\"Invalid form data params\");\n    }\n  }\n\n  getFormData() {\n    return this.fromData;\n  }\n\n  setJsonData(jsonData) {\n    if (TypeCheck.isObject(jsonData) || TypeCheck.isArray(jsonData)) {\n      this.jsonData = jsonData;\n      this.type = Request.TYPES().json;\n      this.data = JSON.stringify(this.jsonData);\n    }else{\n      throw new Error(\"Invalid json data\");\n    }\n  }\n  getJsonData() {\n    return this.jsonData;\n  }\n\n  getData() {\n    return this.data;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  static generateFormBody(requestObj) {\n    let formBody = [];\n    for (let property in requestObj) {\n      let encodedKey = encodeURIComponent(property);\n      let encodedValue = encodeURIComponent(requestObj[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n    return formBody;\n  }\n\n  setQueryParams(queryParams) {\n    if (TypeCheck.isObject(queryParams)) {\n      this.queryParamsMap = queryParams;\n      this.queryParams = \"?\" + Request.generateFormBody(queryParams);\n    }else{\n      throw new Error(\"Invalid query params\");\n    }\n  }\n\n  getQueryParams() {\n    return this.queryParams;\n  }\n\n  getQueryParamsMap() {\n    return this.queryParamsMap;\n  }\n\n}\n","import RNETWORK from './RNETWORK';\n\nexport default class LOGGER {\n\n  static log(message, error){\n    if(RNETWORK.DEBUG_ENABLED == true){\n      if(error){\n        console.log(message, error);\n      }else{\n        console.log(message);\n      }\n    }\n  }\n\n}\n","import Request from './Request';\nimport TypeCheck from './TypeCheck';\nimport LOGGER from './LOGGER';\nimport Response from './Response';\n\nexport default class RNETWORK {\n\n  static DEBUG_ENABLED = false;\n\n  static get(request: Request, preExecuteCallback, postExecuteCallback) {\n    if (preExecuteCallback) {\n      preExecuteCallback();\n    }\n    let url = request.getUrl();\n    if (!TypeCheck.isEmpty(request.getQueryParams())) {\n      url = url + request.getQueryParams();\n    }\n    let response = new Response();\n    try {\n      fetch(url, {\n        method: 'GET',\n        headers: request.getHeaders(),\n      }).then((apiResponse) => {\n        LOGGER.log(\"URL----\" + url + \"/n Response----\" + JSON.stringify(apiResponse));\n        response.setStatus(apiResponse.status);\n        response.setHeaders(apiResponse.headers.map);\n        response.setUrl(apiResponse.url);\n        response.setBody(apiResponse._bodyText);\n        postExecuteCallback(response);\n      }).catch((error) => {\n        LOGGER.log(\"Error\", error);\n        response.setError(\"Network Connection Failed\", error);\n        postExecuteCallback(response);\n      });\n    } catch (error) {\n      LOGGER.log(\"Error\", error);\n      response.setError(\"Request Failed. Please check the request details.\", error);\n      postExecuteCallback(response);\n    }\n  }\n\n  static post(request: Request, preExecuteCallback, postExecuteCallback) {\n    if (preExecuteCallback) {\n      preExecuteCallback();\n    }\n    let url = request.getUrl();\n    if (!TypeCheck.isEmpty(request.getQueryParams())) {\n      url = url + request.getQueryParams();\n    }\n    let response = new Response();\n    try {\n      fetch(url, {\n        method: 'POST',\n        headers: request.getHeaders(),\n        body: request.getData()\n      })\n        .then(response => {\n          return response.text()\n        })\n        .then((apiResponse) => {\n          LOGGER.log(\"URL----\" + url + \"/n Response----\" + JSON.stringify(apiResponse));\n          response.setBody(apiResponse);\n          // response.setBody(JSON.stringify(apiResponse));\n          postExecuteCallback(response);\n        }).catch((error) => {\n          LOGGER.log(\"Error\", error);\n          response.setError(\"Network Connection Failed\", error);\n          postExecuteCallback(response);\n        });\n    } catch (error) {\n      LOGGER.log(\"Error\", error);\n      response.setError(\"Request Failed. Please check the request details.\", error);\n      postExecuteCallback(response);\n    }\n  }\n\n}\n","\nexport const MFLanguage = Object.freeze({\n    ARABIC: 'ar',\n    ENGLISH: 'en'\n});\n\nexport const MFNotificationOption = Object.freeze({\n    ALL: 'all',\n    EMAIL: 'eml',\n    SMS: 'sms',\n    LINK: 'lnk'\n});\n\nexport const MFPaymentype = Object.freeze({\n    CARD: 'card',\n    TOKEN: 'token'\n})\n\nexport const MFMobileCountryCodeISO = Object.freeze({\n    KUWAIT: '+965',\n    SAUDIARABIA: '+966',\n    BAHRAIN: '+973',\n    UAE: '+971',\n    QATAR: '+974',\n    OMAN: '+968',\n    JORDAN: '+962'\n});\n\nexport const MFCurrencyISO = Object.freeze({\n    KUWAIT_KWD: 'KWD',\n    SAUDIARABIA_SAR: 'SAR',\n    BAHRAIN_BHD: 'BHD',\n    UAE_AED: 'AED',\n    QATAR_QAR: 'QAR',\n    OMAN_MOR: 'OMR',\n    JORDAN_JOD: 'JOD',\n    UNITEDSTATES_USD: 'USD',\n    EURO_EUR: 'EUR'\n})\n\nexport const MFKeyType = Object.freeze({\n    INVOICEID: 'InvoiceId',\n    PAYMENTID: 'PaymentId'\n})\n\nexport const MFPaymentMethodCode = Object.freeze({\n    AMEX: \"ae\",\n    SADAD: \"s\",\n    BENEFIT: \"b\",\n    UAEDEBITCARDS: \"uaecc\",\n    QATARDEBITCARDS: \"np\",\n    MADA: \"md\",\n    KFAST: \"kf\",\n    KNET: \"kn\",\n    APPLEPAY: \"ap\",\n    AFS: \"af\",\n    VISAMASTER: \"vm\",\n    STCPAY: \"stc\"\n})\n","import Response from '../Network/Response'\nimport {\n  MFInitiatePayment,\n  MFExecutePaymentRequest,\n  MFPaymentStatusRequest,\n  MFCardInfo,\n  MFSendPaymentRequest\n} from '../Models.js';\nimport {\n  executePaymentJson,\n  sendPaymentJson,\n  issueRequest,\n  parse\n} from './MFPaymentRequest.HelperMethods.js'\nimport { MFPaymentMethodCode } from '../Enums.js'\nimport { Platform } from 'react-native'\n\n/**\n * @class\n * @classdesc A handle payment requests.\n */\nexport default class MFPaymentRequest {\n  /**\n   * A `MFPaymentRequest` access all MFPaymentRequest methods with same object. \n   * @type {MFPaymentRequest}\n   */\n  static sharedInstance = MFPaymentRequest.sharedInstance == null ? new MFPaymentRequest() : MFPaymentRequest.sharedInstance\n  \n   /**\n    * Retrieves all payment methods available for the user token.\n    * @param  {MFInitiatePayment} request - initiate payment object.\n    * @param  {string} apiLanguage - API language.\n    * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n    */   \n  initiatePayment(request: MFInitiatePayment, apiLanguage, postExecuteCallback) {\n    var jsonData = {\n      'InvoiceAmount': request.invoiceAmount,\n      'CurrencyIso': request.currencyIso\n    };\n    issueRequest(jsonData, 'InitiatePayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n        if (Platform.OS === 'ios') {\n          postExecuteCallback(response)\n        } else {\n          if (response.getPaymentMethods() !== null) {\n            var data = {PaymentMethods:[]}\n            response.getPaymentMethods().forEach(element => {\n              if (element.PaymentMethodCode !== MFPaymentMethodCode.APPLEPAY) {\n                data.PaymentMethods.push(element)\n              }\n            });\n            var dataString = JSON.stringify(data)\n            var body = '{\"IsSuccess\":'+ response.getBodyJson().IsSuccess + ',\"Message\":\"'+  response.getBodyJson().Message + '\",\"ValidationErrors\":'+ response.getBodyJson().ValidationErrors + ',\"Data\":' + dataString + '}'\n            var response2 = new Response()\n            response2.setBody(body)\n            postExecuteCallback(response2)\n          } else {\n            postExecuteCallback(response)\n          }\n      }\n    }\n    });\n  }\n\n  /**\n   * execute normal payment.\n   * \n   * @param  navigation - to navigate between payment and app screens.\n   * @param  {MFExecutePaymentRequest} request - execute payment request object.\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  executePayment(navigation, request: MFExecutePaymentRequest, apiLanguage, postExecuteCallback) {\n\n    var jsonData = executePaymentJson(request);\n\n    issueRequest(jsonData, 'ExecutePayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, true)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n        const url = response.getPaymentURL()\n        navigation.navigate('MFWebView', { link: url, apiLanguage: apiLanguage, postExecuteCallback: postExecuteCallback });\n      }\n    });\n  }  \n  /**\n   * get payment status by invoice id or payment id.\n   * @param  {MFPaymentStatusRequest} paymentStatus - payment status request object.\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n   getPaymentStatus(paymentStatus: MFPaymentStatusRequest, apiLanguage, postExecuteCallback) {\n    var jsonData = {\n      'Key': paymentStatus.key,\n      'KeyType': paymentStatus.keyType\n    };\n\n    issueRequest(jsonData, \"GetPaymentStatus\", apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n        postExecuteCallback(response)\n      }\n    })\n  }\n  \n  /**\n   * execute recurring payment.\n   * @param  {Navigation} navigation - to navigate between payment and app screens.\n   * @param  {MFExecutePaymentRequest} request - exeute payment request object.\n   * @param  {MFCardInfo} cardInfo - card information object\n   * @param  {Int} intervalDays - interval days for recurring\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  executeRecurringPayment(navigation, request: MFExecutePaymentRequest, cardInfo: MFCardInfo, intervalDays, apiLanguage, postExecuteCallback) {\n    var jsonData = executePaymentJson(request);\n    issueRequest(jsonData, 'ExecutePayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(true, true)\n      if (errorMessage.length !== 0) {\n        response.setError('Error Message', errorMessage)\n        postExecuteCallback(response);\n      } else {\n        parse(response, apiLanguage, postExecuteCallback, navigation, cardInfo, intervalDays);\n      }\n    });\n  }\n\n  /**\n   * execute direct payment.\n   * @param  {Navigation} navigation - to navigate between payment and app screens.\n   * @param  {MFExecutePaymentRequest} request - exeute payment request object.\n   * @param  {MFCardInfo} cardInfo - card information object\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  executeDirectPayment(navigation, request: MFExecutePaymentRequest, cardInfo: MFCardInfo, apiLanguage, postExecuteCallback) {\n    var jsonData = executePaymentJson(request);\n    issueRequest(jsonData, 'ExecutePayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(true, true)\n      if (errorMessage.length !== 0) {\n        response.setError('Error Message', errorMessage)\n        postExecuteCallback(response);\n      } else {\n        parse(response, apiLanguage, postExecuteCallback, navigation, cardInfo, undefined);\n      }\n    });\n  }\n  \n  /**\n   * cancel recurring payment.\n   * @param  {String} recurringId - recurring id to cancel.\n   * @param  {string} apiLanguage - API language.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  cancelRecurringPayment(recurringId: String, apiLanguage, postExecuteCallback) {\n    var encodedRecurringId = encodeURIComponent(recurringId)\n    issueRequest(undefined, 'CancelRecurringPayment?recurringId=' + encodedRecurringId, apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError('Error Message', errorMessage)\n        postExecuteCallback(response);\n      } else {\n        postExecuteCallback(response);\n      }\n    })\n  }\n  \n  /**\n   * to create payment link and send it by link, sms, email, or all.\n   * @param  {MFSendPaymentRequest} request - send payment request object.\n   * @param  {string} apiLanguage - callback to handle response.\n   * @param  {postExecuteCallback} postExecuteCallback - callback to handle response.\n   */\n  sendPayment(request: MFSendPaymentRequest, apiLanguage, postExecuteCallback) {\n    let jsonData = sendPaymentJson(request)\n\n    issueRequest(jsonData, 'SendPayment', apiLanguage, false, (response: Response) => {\n      var errorMessage = response.errorMessage(false, false)\n      if (errorMessage.length !== 0) {\n        response.setError(\"Error Message\", errorMessage)\n        postExecuteCallback(response);\n      } else {\n        postExecuteCallback(response)\n      }\n    })\n  }\n}\n","import Request from '../Network/Request';\nimport RNETWORK from '../Network/RNETWORK';\nimport Response from '../Network/Response';\nimport { MFSettings } from '../MFSettings.js';\nimport { MFKeyType } from '../index.js'\nimport { Platform } from 'react-native'\nimport {MFPaymentStatusRequest} from '../Models.js'\nimport MFPaymentRequest from '../MFPaymentRequest/MFPaymentRequest.js'\n//region REQUEST HANDLE METHODS\nexport function executePaymentJson(request) {\n    if (request.callBackUrl.length !== 0) {\n        CALLBACK_URL = request.callBackUrl;\n    }\n    if (request.errorUrl.length !== 0) {\n        ERROR_URL = request.errorUrl;\n    }\n    \n    var callerType = 'android'\n    var callerOS = 'android'\n    if (Platform.OS === 'ios') {\n        callerOS = 'ios'\n        if(Platform.isPad) {\n            callerType = 'ipad'\n        } else {\n            callerType = 'phone'\n        }\n      }\n    var sourceInfo =   callerType + '-' + callerOS + '-' + Platform.Version + '-react_native-0.0.181'\n    var jsonData = {\n        \"PaymentMethodId\": request.paymentMethod,\n        \"InvoiceValue\": request.invoiceValue,\n        \"CallBackUrl\": CALLBACK_URL,\n        \"ErrorUrl\": ERROR_URL,\n        \"DisplayCurrencyIso\": request.displayCurrencyIso.rawValue,\n        \"MobileCountryCode\": request.mobileCountryCode,\n        \"UserDefinedField\": request.userDefinedField,\n        \"CustomerName\": request.customerName,\n        \"CustomerCivilId\": request.customerCivilId,\n        \"CustomerReference\": request.customerReference,\n        \"CustomerMobile\": request.customerMobile,\n        \"CustomerEmail\": request.customerEmail,\n        \"Language\": request.language.rawValue,\n        \"SupplierCode\": request.supplierCode,\n        \"SupplierValue\": request.supplierValue,\n        \"SourceInfo\": sourceInfo\n    };\n    if (request.expiryDate !== null) {\n        jsonData.ExpiryDate = request.expiryDate.toISOString();\n    }\n    var invoiceItems = [];\n    for (var i in request.invoiceItems) {\n        var product = request.invoiceItems[i];\n        invoiceItems.push({\n            \"ItemName\": product.name,\n            \"Quantity\": product.quantity,\n            \"UnitPrice\": product.unitPrice\n        });\n        if (invoiceItems.length !== 0) {\n            jsonData.InvoiceItems = invoiceItems;\n        }\n        var customerAddress = request.customerAddress;\n        var customerAddressData = {\n            \"Block\": customerAddress.block,\n            \"Street\": customerAddress.street,\n            \"HouseBuildingNo\": customerAddress.houseBuildingNo,\n            \"Address\": customerAddress.address,\n            \"AddressInstructions\": customerAddress.addressInstructions\n        };\n        jsonData.CustomerAddress = customerAddressData;\n    }\n    return jsonData;\n}\nexport function sendPaymentJson(request) {\n    if (request.callBackUrl.length !== 0) {\n        CALLBACK_URL = request.callBackUrl;\n    }\n    if (request.errorUrl.length !== 0) {\n        ERROR_URL = request.errorUrl;\n    }\n    var jsonData = {\n        \"InvoiceValue\": request.invoiceValue,\n        \"NotificationOption\": request.notificationOption,\n        \"CallBackUrl\": CALLBACK_URL,\n        \"ErrorUrl\": ERROR_URL,\n        \"DisplayCurrencyIso\": request.displayCurrencyIso.rawValue,\n        \"MobileCountryCode\": request.mobileCountryCode,\n        \"UserDefinedField\": request.userDefinedField,\n        \"CustomerName\": request.customerName,\n        \"CustomerCivilId\": request.customerCivilId,\n        \"CustomerReference\": request.customerReference,\n        \"CustomerMobile\": request.customerMobile,\n        \"CustomerEmail\": request.customerEmail,\n        \"Language\": request.language.rawValue,\n        \"SupplierCode\": request.supplierCode,\n        \"SupplierValue\": request.supplierValue\n    };\n    if (request.expiryDate !== null) {\n        jsonData.ExpiryDate = request.expiryDate.toISOString();\n    }\n    var invoiceItems = [];\n    for (var i in request.invoiceItems) {\n        var product = request.invoiceItems[i];\n        invoiceItems.push({\n            \"ItemName\": product.name,\n            \"Quantity\": product.quantity,\n            \"UnitPrice\": product.unitPrice\n        });\n        if (invoiceItems.length !== 0) {\n            jsonData.InvoiceItems = invoiceItems;\n        }\n        var customerAddress = request.customerAddress;\n        var customerAddressData = {\n            \"Block\": customerAddress.block,\n            \"Street\": customerAddress.street,\n            \"HouseBuildingNo\": customerAddress.houseBuildingNo,\n            \"Address\": customerAddress.address,\n            \"AddressInstructions\": customerAddress.addressInstructions\n        };\n        jsonData.CustomerAddress = customerAddressData;\n    }\n    return jsonData;\n}\nexport function cardInfoJson(cardInfo, intervalDays) {\n\n    if (cardInfo.card !== undefined) {\n        let card = cardInfo.card\n        let cardParameters = {\n            \"CardHolderName\": card.cardHolderName,\n            \"Number\": card.number,\n            \"ExpiryMonth\": card.expiryMonth,\n            \"ExpiryYear\": card.expiryYear,\n            \"SecurityCode\": card.securityCode\n        }\n        var jsonData = {\n            \"PaymentType\": cardInfo.paymentType,\n            \"Card\": cardParameters,\n            \"SaveToken\": cardInfo.saveToken || false,\n            \"Bypass3DS\": cardInfo.bypass\n        }\n        if (intervalDays !== undefined) {\n            jsonData.IntervalDays = intervalDays\n            jsonData.IsRecurring = true\n        }\n        return jsonData\n    }\n    return {\n        \"PaymentType\": cardInfo.paymentType,\n        \"Token\": cardInfo.cardToken || ''\n    }\n}\n//endregion\n\n//region NETOWRK HANDLE METHOD\nexport function issueRequest(jsonData, methodName, apiLanguage, withFullPath, postExecuteCallback) {\n    var path = MFSettings.sharedInstance.getBaseURL() + methodName;\n    if (withFullPath) {\n        path = methodName\n    }\n    let newRequest = new Request(path);\n    newRequest.addHeader('Content-Type', 'application/json');\n    newRequest.addHeader('Authorization', 'Bearer ' + MFSettings.sharedInstance.getToken());\n    newRequest.addHeader('Accept-Language', apiLanguage);\n    if (jsonData !== undefined) {\n        newRequest.setJsonData(jsonData);\n    }\n\n    RNETWORK.post(newRequest, () => {\n    }, (response: Response) => {\n        postExecuteCallback(response)\n    });\n}\n//endregion\n\n//region PAYMENT HANDLE METHODS\nexport function parseDirectPaymentResponse(cardInfoResponse, response, postExecuteCallback) {\n    if (cardInfoResponse === undefined) {\n        var responseError = new Response();\n        responseError.setError('Error Message', '' + response.getBodyJson().Data.InvoiceId);\n        postExecuteCallback(responseError);\n    }\n    else {\n        var data = response.getBodyJson().Data;\n        if (data !== undefined) {\n            var directPaymentResponse = new Response();\n            var directPaymentJson = {\n                getPaymentStatusResponse: data,\n                cardInfoResponse: cardInfoResponse\n            };\n            directPaymentResponse.setBody(JSON.stringify(directPaymentJson));\n            postExecuteCallback(directPaymentResponse);\n        }\n        else {\n            var responseError = new Response();\n            responseError.setError('Error Message', 'No payment status response');\n            postExecuteCallback(responseError);\n        }\n    }\n}\nexport function parse(response, apiLanguage, postExecuteCallback, navigation, cardInfo, intervalDays) {\n    if (response.getBodyJson().Data.IsDirectPayment) {\n        if (response.getPaymentURL() !== undefined) {\n            var jsonData = cardInfoJson(cardInfo, intervalDays);\n            var method = response.getPaymentURL();\n            issueRequest(jsonData, method, apiLanguage, true, (response: Response) => {\n                var errorMessage = response.errorMessage(false, false);\n                if (errorMessage.length !== 0) {\n                    response.setError('Error Message', errorMessage);\n                    postExecuteCallback(response);\n                }\n                else {\n                    handleDirectPayment(response, navigation, cardInfo, apiLanguage, postExecuteCallback);\n                }\n            });\n        }\n        else {\n            var responseError = new Response();\n            responseError.setError('Error Message', 'There is no direct payment URL');\n            postExecuteCallback(responseError);\n        }\n    }\n    else {\n        var responseError = new Response();\n        responseError.setError('Error Message', 'Direct payment is not available for this account, please call executePayment method');\n        postExecuteCallback(responseError);\n    }\n}\nexport function handleDirectPayment(response, navigation, cardInfo, apiLanguage, postExecuteCallback) {\n    if (!cardInfo.bypass) {\n        var cardInfoResponse = response.getBodyJson().Data;\n        var url = cardInfoResponse.PaymentURL;\n        navigation.navigate('MFWebView', { link: url, apiLanguage: apiLanguage, cardInfoResponse: cardInfoResponse, postExecuteCallback: postExecuteCallback });\n    }\n    else {\n        var cardInfoResponse = response.getBodyJson().Data;\n        var paymentID = cardInfoResponse.PaymentId;\n        var paymentStatusRequest = new MFPaymentStatusRequest(paymentID, MFKeyType.PAYMENTID);\n        MFPaymentRequest.sharedInstance.getPaymentStatus(paymentStatusRequest, apiLanguage, (response: Response) => {\n            var errorMessage = response.errorMessage(false, false);\n            if (errorMessage.length !== 0) {\n                response.setError('Error Message', errorMessage);\n                postExecuteCallback(response);\n            }\n            else {\n                parseDirectPaymentResponse(cardInfoResponse, response, postExecuteCallback);\n            }\n        });\n    }\n}\n//endregion\nexport var CALLBACK_URL = 'https://myfatoorah.com/'\nexport var ERROR_URL = 'https://myfatooraherror.com/'"],"names":["Response","body","error","JSON","parse","errorMessage","stringify","getBodyJson","Data","PaymentMethods","InvoiceId","PaymentURL","fromDirectPayment","fromExecute","getError","IsSuccess","IsDirectPayment","undefined","InvoiceTransactions","message","forEach","element","TransactionStatus","Error","Message","ValidationErrors","Name","MFSettings","baseURL","token","charAt","length","theme","MFTheme","sharedInstance","navigationTintColor","navigationBarTintColor","navigationTitle","cancelButtonTitle","YellowBox","ignoreWarnings","MFWebView","props","onNavigationStateChange","navigationState","url","route","navigation","apiLanguage","params","postExecuteCallback","cardInfoResponse","includes","CALLBACK_URL","ERROR_URL","paymentId","parseURLParams","paymentStatusRequest","MFPaymentStatusRequest","getPaymentStatus","response","setError","directPaymentResponse","directPaymentJson","setBody","goBack","prevProps","myWebView","reload","React","ActivityIndicator","getTheme","styles","ActivityIndicatorStyle","name","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","link","WebView","uri","LoadingIndicatorView","ref","Component","navigationOptions","setParams","refresh","Image","ImageClass","tintColor","require","Button","StyleSheet","create","right","left","bottom","key","keyType","MFInitiatePayment","invoiceAmount","currencyIso","MFExecutePaymentRequest","invoiceValue","paymentMethod","callBackUrl","errorUrl","customerName","customerCivilId","customerReference","customerEmail","customerMobile","invoiceItems","language","expiryDate","customerAddress","MFCustomerAddress","userDefinedField","displayCurrencyIso","mobileCountryCode","supplierCode","supplierValue","MFProduct","unitPrice","quantity","block","street","houseBuildingNo","address","addressInstructions","MFCardInfo","cardNumber","cardExpiryMonth","cardExpiryYear","cardSecurityCode","cardHolderName","paymentType","saveToken","card","MFCard","bypass","number","expiryMonth","expiryYear","securityCode","MFSendPaymentRequest","notificationOption","mobileCountryIsoCode","TypeCheck","obj","Object","prototype","toString","call","arr","str","value","trim","regx","test","Request","setUrl","headers","isString","isEmpty","isValidUrl","isObject","isArray","headersObj","property","stringData","type","TYPES","string","data","fromData","form","generateFormBody","formData","jsonData","json","queryParams","queryParamsMap","requestObj","formBody","encodedKey","encodeURIComponent","encodedValue","push","join","LOGGER","RNETWORK","DEBUG_ENABLED","log","request","preExecuteCallback","getUrl","getQueryParams","getHeaders","then","apiResponse","setStatus","status","setHeaders","map","_bodyText","catch","getData","text","MFLanguage","freeze","MFNotificationOption","MFPaymentype","MFMobileCountryCodeISO","MFCurrencyISO","MFKeyType","MFPaymentMethodCode","MFPaymentRequest","Platform","OS","getPaymentMethods","PaymentMethodCode","APPLEPAY","dataString","response2","executePaymentJson","getPaymentURL","navigate","paymentStatus","cardInfo","intervalDays","recurringId","encodedRecurringId","sendPaymentJson","callerType","callerOS","isPad","sourceInfo","Version","rawValue","ExpiryDate","toISOString","i","product","InvoiceItems","customerAddressData","CustomerAddress","cardInfoJson","cardParameters","IntervalDays","IsRecurring","cardToken","issueRequest","methodName","withFullPath","path","getBaseURL","newRequest","addHeader","getToken","setJsonData","post","parseDirectPaymentResponse","responseError","method","handleDirectPayment","paymentID","PaymentId","PAYMENTID"],"mappings":"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"}